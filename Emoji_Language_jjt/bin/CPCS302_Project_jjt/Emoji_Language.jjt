/**
 * JJTree template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */options{  static = true;}PARSER_BEGIN(Emoji_Language)package CPCS302_Project_jjt;

public class Emoji_Language{  public static void main(String args [])  {
        System.out.println("\n----- Weclome To Our Emoji Language :] ----- ");
    System.out.println("");
    System.out.print("Enter an expression: ");
    new Emoji_Language(System.in);
    try
    {
      SimpleNode n = Emoji_Language.Start();
      System.out.println("");
      n.dump(" >> ");
       System.out.println("\ncorrect statement.");
      System.out.println("Thank you.");
    }
    catch (Exception e)
    {
      System.out.println("\nOops, Incorrect statement.");
      System.out.println(e.getMessage());
    }
    catch(Error e)
	{
	  System.out.println("\nOops, Incorrect statement.");
	  System.out.println(e.getMessage());
	}
	    }}PARSER_END(Emoji_Language)// ---------------------- TOKENS ------------------------- //

SKIP :
{
  " "
| "\r"
| "\t"
| "\n"
}

TOKEN : /* Arithmetic Operations */
{
  < PLUS : ":)" >
| < MINUS: ":(" >
| < MULTIPLY: "*_*" >
| < DIVIDE : ":/" >
| < REMAINDER: ":|" >
| < POWER: "^_^" >
}

TOKEN : /* Assignment Operator */
{
 < ASSIGNMENT: "^=^" >
}

TOKEN: /* Relational Operations */
{
  < IS_EQUAL: ";)" >
| < NOT_EQUAL: ";(" >
| < GREATER_THAN: ":>" >
| < GREATER_THAN_OR_EQUAL: ":>=" >
| < LESS_THAN: ":<" >
| < LESS_THAN_OR_EQUAL: ":<=" >
}

TOKEN : /* Logical Operators */
{
  < AND: "&_&" >
| < OR: "o_o" >
| < NOT: "x_x" >
}

TOKEN: /* Punctuation Marks */
 {
  < OPEN_ROUND_BRACKET: "(-" >
| < CLOSE_ROUND_BRACKET: "-)" >
| < OPEN_SQUARE_BRACKET: "[" >
| < CLOSE_SQUARE_BRACKET: "]" >
| < OPEN_ANGLE_BRACKET: "<" >
| < CLOSE_ANGLE_BRACKET: ">" >
| < END_STATEMENT:"@" >
| < BAR: "->" >
}

TOKEN : /* Alphabet */
{
  < LETTER: ["a"-"z", "A"-"Z"] >
| < SYMBOL: "!" | "?" | "$" | "_" >
}

TOKEN : /* Identifier */
{
  < ID: ("._.") ("" | < LETTER > | < IN >)+ >
}

TOKEN : /* Data Types */
{
  < IN: (["0"-"9"])+ >
| < FL: (< IN >)* (".") (< IN >)+ >
| < BO: "true" | "false" >
}

TOKEN: /* Keywords */
{ 
  < CONSTANT: "CONS" >
| < INCASE: "INCASE" >
| < SO: "SO" >
| < ELSE: "ELSE" >
| < END: "END" >
| < REPEAT: "REPEAT" >
| < ARR: "Arr" >
| < LIST: "List" >
}

SPECIAL_TOKEN : /* Comments */
{
  < SINGLE_LINE_COMMENT: "#_#" (~["\n"])* > { System.out.println("Found a Single Line Comment"); }
| < MULTI_LINES_COMMENT: "*#_#" (~["*","#","_","*"])* "#_#*" > { System.out.println("Found a Multipl Line Comment"); }
}


// ---------------------- GRAMMARS ------------------------- //

SimpleNode Start() :
{ }
{
  Stmts()
  {
    return jjtThis;
  }
}

void Stmts():
{ }
{
  Decleration_Stmt() END_STATEMENT()
  | Array() | List()
  | Iterative_Stmt() | Conditional_Stmt ()
}

void Decleration_Stmt ():
{ }
{
 Constant_Stmt() | Assignment_Stmt()  
}

void Constant_Stmt ():
{ }
{
  CONSTANT() ID() ASSIGNMENT() Stmt() { System.out.println("Found a Constant"); }
}

void Assignment_Stmt():
{ }
{
 ID() ASSIGNMENT() Stmt() { System.out.println("Found an Assignment Statement"); }
}

void Stmt():
{ }
{
  Operand() (Arithmetic_Stmt() | Relational_Stmt())? | Boolean_Stmt()
}

void Arithmetic_Stmt ():
{ }
{
  ( Arithmetic_Operation() Operand())+ 
}

void Relational_Stmt():
{ }
{
  (Relational_Operation() Operand())+
}

void Boolean_Stmt():
{ }
{
 BO() (Logical_Operators() BO())+
} 

void Arithmetic_Operation():
{ }
{
PLUS() | MINUS() | MULTIPLY() | DIVIDE() | REMAINDER() | POWER() 
}

void Relational_Operation():
{ }
{
  IS_EQUAL() | NOT_EQUAL() | GREATER_THAN() | GREATER_THAN_OR_EQUAL() | LESS_THAN() |
  LESS_THAN_OR_EQUAL()
}

void Logical_Operators():
{ }
{
  AND() | OR() | NOT()
}

void Array():
{ }
{
 ARR() ID() OPEN_ANGLE_BRACKET() CLOSE_ANGLE_BRACKET()
 ASSIGNMENT() OPEN_SQUARE_BRACKET()
 ( Number() | String() ) ( BAR() ( Number() | String() ) )*
 CLOSE_SQUARE_BRACKET() END_STATEMENT() { System.out.println("Found an Array"); }
}

void List():
{ int count = 0; Token listSize; }
{
  LIST() ID() OPEN_ANGLE_BRACKET() listSize = IN() CLOSE_ANGLE_BRACKET()
  ASSIGNMENT() OPEN_SQUARE_BRACKET()
  ( Number() | String() ) { count++; } ( BAR() ( Number() | String() ) { count++; } )*
  CLOSE_SQUARE_BRACKET() END_STATEMENT()
  { if (count != Integer.parseInt(listSize.image)) throw new ParseException("The list must be of the specified size!"); }
} 

void Iterative_Stmt():
{ }
{
  REPEAT()  Condition() OPEN_ROUND_BRACKET() (Stmts())+ CLOSE_ROUND_BRACKET() 
}

void Conditional_Stmt():
{ }
{
  INCASE() Condition() SO() OPEN_ROUND_BRACKET()
  (Stmts())+ CLOSE_ROUND_BRACKET() (Else_Stmt())? END()
}

void Condition ():
{ }
{
  OPEN_SQUARE_BRACKET() (ID() | Number()) Relational_Stmt() CLOSE_SQUARE_BRACKET()
}

void Else_Stmt():
{ }
{
  ELSE() OPEN_ROUND_BRACKET() (Stmts())+ CLOSE_ROUND_BRACKET() 
}
 
void String():
{ }
{
 (LETTER()|SYMBOL())+
}

void Operand():
{ }
{
  Number() | ID()
}


// -------------- Convert Tokens To Methods ---------------- //

void Number() : {Token t;}
{
t = < IN > {jjtThis.jjtSetValue(t.image);}
| t = < FL > {jjtThis.jjtSetValue(t.image);}
}

void PLUS(): {Token t;}
{
 t= < PLUS> {jjtThis.jjtSetValue(t.image);}
}

void MINUS(): {Token t;}
{
 t= < MINUS > {jjtThis.jjtSetValue(t.image);}
}

void MULTIPLY(): {Token t;}
{
 t= < MULTIPLY > {jjtThis.jjtSetValue(t.image);}
}
void DIVIDE(): {Token t;}
{
 t= < DIVIDE > {jjtThis.jjtSetValue(t.image);}
}

void REMAINDER(): {Token t;}
{
 t= < REMAINDER > {jjtThis.jjtSetValue(t.image);}
}
void POWER(): {Token t;}
{
 t= < POWER  > {jjtThis.jjtSetValue(t.image);}
}

void ASSIGNMENT(): {Token t;}
{
 t= < ASSIGNMENT > {jjtThis.jjtSetValue(t.image);}
}

void IS_EQUAL(): {Token t;}
{
 t= < IS_EQUAL > {jjtThis.jjtSetValue(t.image);}
}

void NOT_EQUAL(): {Token t;}
{
 t= < NOT_EQUAL > {jjtThis.jjtSetValue(t.image);}
}

void GREATER_THAN(): {Token t;}
{
 t= < GREATER_THAN > {jjtThis.jjtSetValue(t.image);}
}

void GREATER_THAN_OR_EQUAL(): {Token t;}
{
 t= < GREATER_THAN_OR_EQUAL > {jjtThis.jjtSetValue(t.image);}
}

void LESS_THAN(): {Token t;}
{
 t= < LESS_THAN > {jjtThis.jjtSetValue(t.image);}
}

void LESS_THAN_OR_EQUAL(): {Token t;}
{
 t= < LESS_THAN_OR_EQUAL > {jjtThis.jjtSetValue(t.image);}
}

void AND(): {Token t;}
{
 t= < AND > {jjtThis.jjtSetValue(t.image);}
}

void OR(): {Token t;}
{
 t= < OR > {jjtThis.jjtSetValue(t.image);}
}

void NOT(): {Token t;}
{
 t= < NOT > {jjtThis.jjtSetValue(t.image);}
}

void OPEN_ROUND_BRACKET(): {Token t;}
{
 t= < OPEN_ROUND_BRACKET > {jjtThis.jjtSetValue(t.image);}
}

void CLOSE_ROUND_BRACKET(): {Token t;}
{
 t= < CLOSE_ROUND_BRACKET > {jjtThis.jjtSetValue(t.image);}
}

void OPEN_SQUARE_BRACKET(): {Token t;}
{
 t= < OPEN_SQUARE_BRACKET > {jjtThis.jjtSetValue(t.image);}
}

void CLOSE_SQUARE_BRACKET(): {Token t;}
{
 t= < CLOSE_SQUARE_BRACKET > {jjtThis.jjtSetValue(t.image);}
}

void OPEN_ANGLE_BRACKET(): {Token t;}
{
 t= < OPEN_ANGLE_BRACKET > {jjtThis.jjtSetValue(t.image);}
}

void CLOSE_ANGLE_BRACKET(): {Token t;}
{
 t= < CLOSE_ANGLE_BRACKET > {jjtThis.jjtSetValue(t.image);}
}

void END_STATEMENT(): {Token t;}
{
 t= < END_STATEMENT > {jjtThis.jjtSetValue(t.image);}
}

void BAR(): {Token t;}
{
 t= < BAR > {jjtThis.jjtSetValue(t.image);}
}

void LETTER(): {Token t;}
{
 t= < LETTER > {jjtThis.jjtSetValue(t.image);}
}

void SYMBOL(): {Token t;}
{
 t= < SYMBOL > {jjtThis.jjtSetValue(t.image);}
}

void ID(): {Token t;}
{
 t= < ID > {jjtThis.jjtSetValue(t.image);}
}

Token IN(): {Token t;}
{
 t= < IN > {jjtThis.jjtSetValue(t.image); return t;}
}

void FL(): {Token t;}
{
 t= < FL > {jjtThis.jjtSetValue(t.image);}
}

void BO(): {Token t;}
{
 t= < BO > {jjtThis.jjtSetValue(t.image);}
}

void CONSTANT(): {Token t;}
{
 t= < CONSTANT > {jjtThis.jjtSetValue(t.image);}
}

void INCASE(): {Token t;}
{
 t= < INCASE > {jjtThis.jjtSetValue(t.image);}
}

void SO(): {Token t;}
{
 t= < SO > {jjtThis.jjtSetValue(t.image);}
}

void ELSE(): {Token t;}
{
 t= < ELSE > {jjtThis.jjtSetValue(t.image);}
}

void END(): {Token t;}
{
 t= < END > {jjtThis.jjtSetValue(t.image);}
}

void REPEAT(): {Token t;}
{
 t= < REPEAT > {jjtThis.jjtSetValue(t.image);}
}

void ARR(): {Token t;}
{
 t= < ARR > {jjtThis.jjtSetValue(t.image);}
}

void LIST(): {Token t;}
{
 t= < LIST > {jjtThis.jjtSetValue(t.image);}
}
