/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. Emoji_Language.jj */
/*@egen*//**
 * JJTree template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */options{  static = true;}PARSER_BEGIN(Emoji_Language)package CPCS302_Project_jjt;

public class Emoji_Language/*@bgen(jjtree)*/implements Emoji_LanguageTreeConstants/*@egen*/{/*@bgen(jjtree)*/
  protected static JJTEmoji_LanguageState jjtree = new JJTEmoji_LanguageState();

/*@egen*/  public static void main(String args [])  {
        System.out.println("\n----- Weclome To Our Emoji Language :] ----- ");
    System.out.println("");
    System.out.print("Enter an expression: ");
    new Emoji_Language(System.in);
    try
    {
      SimpleNode n = Emoji_Language.Start();
      System.out.println("");
      n.dump(" >> ");
       System.out.println("\ncorrect statement.");
      System.out.println("Thank you.");
    }
    catch (Exception e)
    {
      System.out.println("\nOops, Incorrect statement.");
      System.out.println(e.getMessage());
    }
    catch(Error e)
	{
	  System.out.println("\nOops, Incorrect statement.");
	  System.out.println(e.getMessage());
	}
	    }}PARSER_END(Emoji_Language)// ---------------------- TOKENS ------------------------- //

SKIP :
{
  " "
| "\r"
| "\t"
| "\n"
}

TOKEN : /* Arithmetic Operations */
{
  < PLUS : ":)" >
| < MINUS: ":(" >
| < MULTIPLY: "*_*" >
| < DIVIDE : ":/" >
| < REMAINDER: ":|" >
| < POWER: "^_^" >
}

TOKEN : /* Assignment Operator */
{
 < ASSIGNMENT: "^=^" >
}

TOKEN: /* Relational Operations */
{
  < IS_EQUAL: ";)" >
| < NOT_EQUAL: ";(" >
| < GREATER_THAN: ":>" >
| < GREATER_THAN_OR_EQUAL: ":>=" >
| < LESS_THAN: ":<" >
| < LESS_THAN_OR_EQUAL: ":<=" >
}

TOKEN : /* Logical Operators */
{
  < AND: "&_&" >
| < OR: "o_o" >
| < NOT: "x_x" >
}

TOKEN: /* Punctuation Marks */
 {
  < OPEN_ROUND_BRACKET: "(-" >
| < CLOSE_ROUND_BRACKET: "-)" >
| < OPEN_SQUARE_BRACKET: "[" >
| < CLOSE_SQUARE_BRACKET: "]" >
| < OPEN_ANGLE_BRACKET: "<" >
| < CLOSE_ANGLE_BRACKET: ">" >
| < END_STATEMENT:"@" >
| < BAR: "->" >
}

TOKEN : /* Alphabet */
{
  < LETTER: ["a"-"z", "A"-"Z"] >
| < SYMBOL: "!" | "?" | "$" | "_" >
}

TOKEN : /* Identifier */
{
  < ID: ("._.") ("" | < LETTER > | < IN >)+ >
}

TOKEN : /* Data Types */
{
  < IN: (["0"-"9"])+ >
| < FL: (< IN >)* (".") (< IN >)+ >
| < BO: "true" | "false" >
}

TOKEN: /* Keywords */
{ 
  < CONSTANT: "CONS" >
| < INCASE: "INCASE" >
| < SO: "SO" >
| < ELSE: "ELSE" >
| < END: "END" >
| < REPEAT: "REPEAT" >
| < ARR: "Arr" >
| < LIST: "List" >
}

SPECIAL_TOKEN : /* Comments */
{
  < SINGLE_LINE_COMMENT: "#_#" (~["\n"])* > { System.out.println("Found a Single Line Comment"); }
| < MULTI_LINES_COMMENT: "*#_#" (~["*","#","_","*"])* "#_#*" > { System.out.println("Found a Multipl Line Comment"); }
}


// ---------------------- GRAMMARS ------------------------- //

SimpleNode Start() :
{/*@bgen(jjtree) Start */
  SimpleNode jjtn000 = new SimpleNode(JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ }
{/*@bgen(jjtree) Start */
  try {
/*@egen*/
  Stmts()/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    return jjtn000;
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Stmts():
{/*@bgen(jjtree) Stmts */
  SimpleNode jjtn000 = new SimpleNode(JJTSTMTS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ }
{/*@bgen(jjtree) Stmts */
  try {
/*@egen*/
  Decleration_Stmt() END_STATEMENT()
  | Array() | List()
  | Iterative_Stmt() | Conditional_Stmt ()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Decleration_Stmt ():
{/*@bgen(jjtree) Decleration_Stmt */
  SimpleNode jjtn000 = new SimpleNode(JJTDECLERATION_STMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ }
{/*@bgen(jjtree) Decleration_Stmt */
 try {
/*@egen*/
 Constant_Stmt() | Assignment_Stmt()/*@bgen(jjtree)*/
 } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     throw (RuntimeException)jjte000;
   }
   if (jjte000 instanceof ParseException) {
     throw (ParseException)jjte000;
   }
   throw (Error)jjte000;
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
 }
/*@egen*/  
}

void Constant_Stmt ():
{/*@bgen(jjtree) Constant_Stmt */
  SimpleNode jjtn000 = new SimpleNode(JJTCONSTANT_STMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ }
{/*@bgen(jjtree) Constant_Stmt */
  try {
/*@egen*/
  CONSTANT() ID() ASSIGNMENT() Stmt()/*@bgen(jjtree)*/
                                      {
                                        jjtree.closeNodeScope(jjtn000, true);
                                        jjtc000 = false;
                                      }
/*@egen*/ { System.out.println("Found a Constant"); }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Assignment_Stmt():
{/*@bgen(jjtree) Assignment_Stmt */
  SimpleNode jjtn000 = new SimpleNode(JJTASSIGNMENT_STMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ }
{/*@bgen(jjtree) Assignment_Stmt */
 try {
/*@egen*/
 ID() ASSIGNMENT() Stmt()/*@bgen(jjtree)*/
                          {
                            jjtree.closeNodeScope(jjtn000, true);
                            jjtc000 = false;
                          }
/*@egen*/ { System.out.println("Found an Assignment Statement"); }/*@bgen(jjtree)*/
 } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     throw (RuntimeException)jjte000;
   }
   if (jjte000 instanceof ParseException) {
     throw (ParseException)jjte000;
   }
   throw (Error)jjte000;
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
 }
/*@egen*/
}

void Stmt():
{/*@bgen(jjtree) Stmt */
  SimpleNode jjtn000 = new SimpleNode(JJTSTMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ }
{/*@bgen(jjtree) Stmt */
  try {
/*@egen*/
  Operand() (Arithmetic_Stmt() | Relational_Stmt())? | Boolean_Stmt()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Arithmetic_Stmt ():
{/*@bgen(jjtree) Arithmetic_Stmt */
  SimpleNode jjtn000 = new SimpleNode(JJTARITHMETIC_STMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ }
{/*@bgen(jjtree) Arithmetic_Stmt */
  try {
/*@egen*/
  ( Arithmetic_Operation() Operand())+/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/ 
}

void Relational_Stmt():
{/*@bgen(jjtree) Relational_Stmt */
  SimpleNode jjtn000 = new SimpleNode(JJTRELATIONAL_STMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ }
{/*@bgen(jjtree) Relational_Stmt */
  try {
/*@egen*/
  (Relational_Operation() Operand())+/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Boolean_Stmt():
{/*@bgen(jjtree) Boolean_Stmt */
  SimpleNode jjtn000 = new SimpleNode(JJTBOOLEAN_STMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ }
{/*@bgen(jjtree) Boolean_Stmt */
 try {
/*@egen*/
 BO() (Logical_Operators() BO())+/*@bgen(jjtree)*/
 } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     throw (RuntimeException)jjte000;
   }
   if (jjte000 instanceof ParseException) {
     throw (ParseException)jjte000;
   }
   throw (Error)jjte000;
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
 }
/*@egen*/
} 

void Arithmetic_Operation():
{/*@bgen(jjtree) Arithmetic_Operation */
  SimpleNode jjtn000 = new SimpleNode(JJTARITHMETIC_OPERATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ }
{/*@bgen(jjtree) Arithmetic_Operation */
try {
/*@egen*/
PLUS() | MINUS() | MULTIPLY() | DIVIDE() | REMAINDER() | POWER()/*@bgen(jjtree)*/
} catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  if (jjte000 instanceof ParseException) {
    throw (ParseException)jjte000;
  }
  throw (Error)jjte000;
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/ 
}

void Relational_Operation():
{/*@bgen(jjtree) Relational_Operation */
  SimpleNode jjtn000 = new SimpleNode(JJTRELATIONAL_OPERATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ }
{/*@bgen(jjtree) Relational_Operation */
  try {
/*@egen*/
  IS_EQUAL() | NOT_EQUAL() | GREATER_THAN() | GREATER_THAN_OR_EQUAL() | LESS_THAN() |
  LESS_THAN_OR_EQUAL()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Logical_Operators():
{/*@bgen(jjtree) Logical_Operators */
  SimpleNode jjtn000 = new SimpleNode(JJTLOGICAL_OPERATORS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ }
{/*@bgen(jjtree) Logical_Operators */
  try {
/*@egen*/
  AND() | OR() | NOT()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Array():
{/*@bgen(jjtree) Array */
  SimpleNode jjtn000 = new SimpleNode(JJTARRAY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ }
{/*@bgen(jjtree) Array */
 try {
/*@egen*/
 ARR() ID() OPEN_ANGLE_BRACKET() CLOSE_ANGLE_BRACKET()
 ASSIGNMENT() OPEN_SQUARE_BRACKET()
 ( Number() | String() ) ( BAR() ( Number() | String() ) )*
 CLOSE_SQUARE_BRACKET() END_STATEMENT()/*@bgen(jjtree)*/
                                        {
                                          jjtree.closeNodeScope(jjtn000, true);
                                          jjtc000 = false;
                                        }
/*@egen*/ { System.out.println("Found an Array"); }/*@bgen(jjtree)*/
 } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     throw (RuntimeException)jjte000;
   }
   if (jjte000 instanceof ParseException) {
     throw (ParseException)jjte000;
   }
   throw (Error)jjte000;
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
 }
/*@egen*/
}

void List():
{/*@bgen(jjtree) List */
  SimpleNode jjtn000 = new SimpleNode(JJTLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ int count = 0; Token listSize; }
{/*@bgen(jjtree) List */
  try {
/*@egen*/
  LIST() ID() OPEN_ANGLE_BRACKET() listSize = IN() CLOSE_ANGLE_BRACKET()
  ASSIGNMENT() OPEN_SQUARE_BRACKET()
  ( Number() | String() ) { count++; } ( BAR() ( Number() | String() ) { count++; } )*
  CLOSE_SQUARE_BRACKET() END_STATEMENT()/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  { if (count != Integer.parseInt(listSize.image)) throw new ParseException("The list must be of the specified size!"); }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
} 

void Iterative_Stmt():
{/*@bgen(jjtree) Iterative_Stmt */
  SimpleNode jjtn000 = new SimpleNode(JJTITERATIVE_STMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ }
{/*@bgen(jjtree) Iterative_Stmt */
  try {
/*@egen*/
  REPEAT()  Condition() OPEN_ROUND_BRACKET() (Stmts())+ CLOSE_ROUND_BRACKET()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/ 
}

void Conditional_Stmt():
{/*@bgen(jjtree) Conditional_Stmt */
  SimpleNode jjtn000 = new SimpleNode(JJTCONDITIONAL_STMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ }
{/*@bgen(jjtree) Conditional_Stmt */
  try {
/*@egen*/
  INCASE() Condition() SO() OPEN_ROUND_BRACKET()
  (Stmts())+ CLOSE_ROUND_BRACKET() (Else_Stmt())? END()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Condition ():
{/*@bgen(jjtree) Condition */
  SimpleNode jjtn000 = new SimpleNode(JJTCONDITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ }
{/*@bgen(jjtree) Condition */
  try {
/*@egen*/
  OPEN_SQUARE_BRACKET() (ID() | Number()) Relational_Stmt() CLOSE_SQUARE_BRACKET()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Else_Stmt():
{/*@bgen(jjtree) Else_Stmt */
  SimpleNode jjtn000 = new SimpleNode(JJTELSE_STMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ }
{/*@bgen(jjtree) Else_Stmt */
  try {
/*@egen*/
  ELSE() OPEN_ROUND_BRACKET() (Stmts())+ CLOSE_ROUND_BRACKET()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/ 
}
 
void String():
{/*@bgen(jjtree) String */
  SimpleNode jjtn000 = new SimpleNode(JJTSTRING);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ }
{/*@bgen(jjtree) String */
 try {
/*@egen*/
 (LETTER()|SYMBOL())+/*@bgen(jjtree)*/
 } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     throw (RuntimeException)jjte000;
   }
   if (jjte000 instanceof ParseException) {
     throw (ParseException)jjte000;
   }
   throw (Error)jjte000;
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
 }
/*@egen*/
}

void Operand():
{/*@bgen(jjtree) Operand */
  SimpleNode jjtn000 = new SimpleNode(JJTOPERAND);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ }
{/*@bgen(jjtree) Operand */
  try {
/*@egen*/
  Number() | ID()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}


// -------------- Convert Tokens To Methods ---------------- //

void Number() : {/*@bgen(jjtree) Number */
                 SimpleNode jjtn000 = new SimpleNode(JJTNUMBER);
                 boolean jjtc000 = true;
                 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) Number */
try {
/*@egen*/
t = < IN >/*@bgen(jjtree)*/
           {
             jjtree.closeNodeScope(jjtn000, true);
             jjtc000 = false;
           }
/*@egen*/ {jjtn000.jjtSetValue(t.image);}
| t = < FL >/*@bgen(jjtree)*/
             {
               jjtree.closeNodeScope(jjtn000, true);
               jjtc000 = false;
             }
/*@egen*/ {jjtn000.jjtSetValue(t.image);}/*@bgen(jjtree)*/
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/
}

void PLUS(): {/*@bgen(jjtree) PLUS */
              SimpleNode jjtn000 = new SimpleNode(JJTPLUS);
              boolean jjtc000 = true;
              jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) PLUS */
 try {
/*@egen*/
 t= < PLUS>/*@bgen(jjtree)*/
            {
              jjtree.closeNodeScope(jjtn000, true);
              jjtc000 = false;
            }
/*@egen*/ {jjtn000.jjtSetValue(t.image);}/*@bgen(jjtree)*/
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
 }
/*@egen*/
}

void MINUS(): {/*@bgen(jjtree) MINUS */
               SimpleNode jjtn000 = new SimpleNode(JJTMINUS);
               boolean jjtc000 = true;
               jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) MINUS */
 try {
/*@egen*/
 t= < MINUS >/*@bgen(jjtree)*/
              {
                jjtree.closeNodeScope(jjtn000, true);
                jjtc000 = false;
              }
/*@egen*/ {jjtn000.jjtSetValue(t.image);}/*@bgen(jjtree)*/
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
 }
/*@egen*/
}

void MULTIPLY(): {/*@bgen(jjtree) MULTIPLY */
                  SimpleNode jjtn000 = new SimpleNode(JJTMULTIPLY);
                  boolean jjtc000 = true;
                  jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) MULTIPLY */
 try {
/*@egen*/
 t= < MULTIPLY >/*@bgen(jjtree)*/
                 {
                   jjtree.closeNodeScope(jjtn000, true);
                   jjtc000 = false;
                 }
/*@egen*/ {jjtn000.jjtSetValue(t.image);}/*@bgen(jjtree)*/
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
 }
/*@egen*/
}
void DIVIDE(): {/*@bgen(jjtree) DIVIDE */
                SimpleNode jjtn000 = new SimpleNode(JJTDIVIDE);
                boolean jjtc000 = true;
                jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) DIVIDE */
 try {
/*@egen*/
 t= < DIVIDE >/*@bgen(jjtree)*/
               {
                 jjtree.closeNodeScope(jjtn000, true);
                 jjtc000 = false;
               }
/*@egen*/ {jjtn000.jjtSetValue(t.image);}/*@bgen(jjtree)*/
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
 }
/*@egen*/
}

void REMAINDER(): {/*@bgen(jjtree) REMAINDER */
                   SimpleNode jjtn000 = new SimpleNode(JJTREMAINDER);
                   boolean jjtc000 = true;
                   jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) REMAINDER */
 try {
/*@egen*/
 t= < REMAINDER >/*@bgen(jjtree)*/
                  {
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
                  }
/*@egen*/ {jjtn000.jjtSetValue(t.image);}/*@bgen(jjtree)*/
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
 }
/*@egen*/
}
void POWER(): {/*@bgen(jjtree) POWER */
               SimpleNode jjtn000 = new SimpleNode(JJTPOWER);
               boolean jjtc000 = true;
               jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) POWER */
 try {
/*@egen*/
 t= < POWER  >/*@bgen(jjtree)*/
               {
                 jjtree.closeNodeScope(jjtn000, true);
                 jjtc000 = false;
               }
/*@egen*/ {jjtn000.jjtSetValue(t.image);}/*@bgen(jjtree)*/
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
 }
/*@egen*/
}

void ASSIGNMENT(): {/*@bgen(jjtree) ASSIGNMENT */
                    SimpleNode jjtn000 = new SimpleNode(JJTASSIGNMENT);
                    boolean jjtc000 = true;
                    jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) ASSIGNMENT */
 try {
/*@egen*/
 t= < ASSIGNMENT >/*@bgen(jjtree)*/
                   {
                     jjtree.closeNodeScope(jjtn000, true);
                     jjtc000 = false;
                   }
/*@egen*/ {jjtn000.jjtSetValue(t.image);}/*@bgen(jjtree)*/
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
 }
/*@egen*/
}

void IS_EQUAL(): {/*@bgen(jjtree) IS_EQUAL */
                  SimpleNode jjtn000 = new SimpleNode(JJTIS_EQUAL);
                  boolean jjtc000 = true;
                  jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) IS_EQUAL */
 try {
/*@egen*/
 t= < IS_EQUAL >/*@bgen(jjtree)*/
                 {
                   jjtree.closeNodeScope(jjtn000, true);
                   jjtc000 = false;
                 }
/*@egen*/ {jjtn000.jjtSetValue(t.image);}/*@bgen(jjtree)*/
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
 }
/*@egen*/
}

void NOT_EQUAL(): {/*@bgen(jjtree) NOT_EQUAL */
                   SimpleNode jjtn000 = new SimpleNode(JJTNOT_EQUAL);
                   boolean jjtc000 = true;
                   jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) NOT_EQUAL */
 try {
/*@egen*/
 t= < NOT_EQUAL >/*@bgen(jjtree)*/
                  {
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
                  }
/*@egen*/ {jjtn000.jjtSetValue(t.image);}/*@bgen(jjtree)*/
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
 }
/*@egen*/
}

void GREATER_THAN(): {/*@bgen(jjtree) GREATER_THAN */
                      SimpleNode jjtn000 = new SimpleNode(JJTGREATER_THAN);
                      boolean jjtc000 = true;
                      jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) GREATER_THAN */
 try {
/*@egen*/
 t= < GREATER_THAN >/*@bgen(jjtree)*/
                     {
                       jjtree.closeNodeScope(jjtn000, true);
                       jjtc000 = false;
                     }
/*@egen*/ {jjtn000.jjtSetValue(t.image);}/*@bgen(jjtree)*/
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
 }
/*@egen*/
}

void GREATER_THAN_OR_EQUAL(): {/*@bgen(jjtree) GREATER_THAN_OR_EQUAL */
                               SimpleNode jjtn000 = new SimpleNode(JJTGREATER_THAN_OR_EQUAL);
                               boolean jjtc000 = true;
                               jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) GREATER_THAN_OR_EQUAL */
 try {
/*@egen*/
 t= < GREATER_THAN_OR_EQUAL >/*@bgen(jjtree)*/
                              {
                                jjtree.closeNodeScope(jjtn000, true);
                                jjtc000 = false;
                              }
/*@egen*/ {jjtn000.jjtSetValue(t.image);}/*@bgen(jjtree)*/
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
 }
/*@egen*/
}

void LESS_THAN(): {/*@bgen(jjtree) LESS_THAN */
                   SimpleNode jjtn000 = new SimpleNode(JJTLESS_THAN);
                   boolean jjtc000 = true;
                   jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) LESS_THAN */
 try {
/*@egen*/
 t= < LESS_THAN >/*@bgen(jjtree)*/
                  {
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
                  }
/*@egen*/ {jjtn000.jjtSetValue(t.image);}/*@bgen(jjtree)*/
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
 }
/*@egen*/
}

void LESS_THAN_OR_EQUAL(): {/*@bgen(jjtree) LESS_THAN_OR_EQUAL */
                            SimpleNode jjtn000 = new SimpleNode(JJTLESS_THAN_OR_EQUAL);
                            boolean jjtc000 = true;
                            jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) LESS_THAN_OR_EQUAL */
 try {
/*@egen*/
 t= < LESS_THAN_OR_EQUAL >/*@bgen(jjtree)*/
                           {
                             jjtree.closeNodeScope(jjtn000, true);
                             jjtc000 = false;
                           }
/*@egen*/ {jjtn000.jjtSetValue(t.image);}/*@bgen(jjtree)*/
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
 }
/*@egen*/
}

void AND(): {/*@bgen(jjtree) AND */
             SimpleNode jjtn000 = new SimpleNode(JJTAND);
             boolean jjtc000 = true;
             jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) AND */
 try {
/*@egen*/
 t= < AND >/*@bgen(jjtree)*/
            {
              jjtree.closeNodeScope(jjtn000, true);
              jjtc000 = false;
            }
/*@egen*/ {jjtn000.jjtSetValue(t.image);}/*@bgen(jjtree)*/
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
 }
/*@egen*/
}

void OR(): {/*@bgen(jjtree) OR */
            SimpleNode jjtn000 = new SimpleNode(JJTOR);
            boolean jjtc000 = true;
            jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) OR */
 try {
/*@egen*/
 t= < OR >/*@bgen(jjtree)*/
           {
             jjtree.closeNodeScope(jjtn000, true);
             jjtc000 = false;
           }
/*@egen*/ {jjtn000.jjtSetValue(t.image);}/*@bgen(jjtree)*/
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
 }
/*@egen*/
}

void NOT(): {/*@bgen(jjtree) NOT */
             SimpleNode jjtn000 = new SimpleNode(JJTNOT);
             boolean jjtc000 = true;
             jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) NOT */
 try {
/*@egen*/
 t= < NOT >/*@bgen(jjtree)*/
            {
              jjtree.closeNodeScope(jjtn000, true);
              jjtc000 = false;
            }
/*@egen*/ {jjtn000.jjtSetValue(t.image);}/*@bgen(jjtree)*/
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
 }
/*@egen*/
}

void OPEN_ROUND_BRACKET(): {/*@bgen(jjtree) OPEN_ROUND_BRACKET */
                            SimpleNode jjtn000 = new SimpleNode(JJTOPEN_ROUND_BRACKET);
                            boolean jjtc000 = true;
                            jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) OPEN_ROUND_BRACKET */
 try {
/*@egen*/
 t= < OPEN_ROUND_BRACKET >/*@bgen(jjtree)*/
                           {
                             jjtree.closeNodeScope(jjtn000, true);
                             jjtc000 = false;
                           }
/*@egen*/ {jjtn000.jjtSetValue(t.image);}/*@bgen(jjtree)*/
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
 }
/*@egen*/
}

void CLOSE_ROUND_BRACKET(): {/*@bgen(jjtree) CLOSE_ROUND_BRACKET */
                             SimpleNode jjtn000 = new SimpleNode(JJTCLOSE_ROUND_BRACKET);
                             boolean jjtc000 = true;
                             jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) CLOSE_ROUND_BRACKET */
 try {
/*@egen*/
 t= < CLOSE_ROUND_BRACKET >/*@bgen(jjtree)*/
                            {
                              jjtree.closeNodeScope(jjtn000, true);
                              jjtc000 = false;
                            }
/*@egen*/ {jjtn000.jjtSetValue(t.image);}/*@bgen(jjtree)*/
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
 }
/*@egen*/
}

void OPEN_SQUARE_BRACKET(): {/*@bgen(jjtree) OPEN_SQUARE_BRACKET */
                             SimpleNode jjtn000 = new SimpleNode(JJTOPEN_SQUARE_BRACKET);
                             boolean jjtc000 = true;
                             jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) OPEN_SQUARE_BRACKET */
 try {
/*@egen*/
 t= < OPEN_SQUARE_BRACKET >/*@bgen(jjtree)*/
                            {
                              jjtree.closeNodeScope(jjtn000, true);
                              jjtc000 = false;
                            }
/*@egen*/ {jjtn000.jjtSetValue(t.image);}/*@bgen(jjtree)*/
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
 }
/*@egen*/
}

void CLOSE_SQUARE_BRACKET(): {/*@bgen(jjtree) CLOSE_SQUARE_BRACKET */
                              SimpleNode jjtn000 = new SimpleNode(JJTCLOSE_SQUARE_BRACKET);
                              boolean jjtc000 = true;
                              jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) CLOSE_SQUARE_BRACKET */
 try {
/*@egen*/
 t= < CLOSE_SQUARE_BRACKET >/*@bgen(jjtree)*/
                             {
                               jjtree.closeNodeScope(jjtn000, true);
                               jjtc000 = false;
                             }
/*@egen*/ {jjtn000.jjtSetValue(t.image);}/*@bgen(jjtree)*/
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
 }
/*@egen*/
}

void OPEN_ANGLE_BRACKET(): {/*@bgen(jjtree) OPEN_ANGLE_BRACKET */
                            SimpleNode jjtn000 = new SimpleNode(JJTOPEN_ANGLE_BRACKET);
                            boolean jjtc000 = true;
                            jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) OPEN_ANGLE_BRACKET */
 try {
/*@egen*/
 t= < OPEN_ANGLE_BRACKET >/*@bgen(jjtree)*/
                           {
                             jjtree.closeNodeScope(jjtn000, true);
                             jjtc000 = false;
                           }
/*@egen*/ {jjtn000.jjtSetValue(t.image);}/*@bgen(jjtree)*/
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
 }
/*@egen*/
}

void CLOSE_ANGLE_BRACKET(): {/*@bgen(jjtree) CLOSE_ANGLE_BRACKET */
                             SimpleNode jjtn000 = new SimpleNode(JJTCLOSE_ANGLE_BRACKET);
                             boolean jjtc000 = true;
                             jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) CLOSE_ANGLE_BRACKET */
 try {
/*@egen*/
 t= < CLOSE_ANGLE_BRACKET >/*@bgen(jjtree)*/
                            {
                              jjtree.closeNodeScope(jjtn000, true);
                              jjtc000 = false;
                            }
/*@egen*/ {jjtn000.jjtSetValue(t.image);}/*@bgen(jjtree)*/
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
 }
/*@egen*/
}

void END_STATEMENT(): {/*@bgen(jjtree) END_STATEMENT */
                       SimpleNode jjtn000 = new SimpleNode(JJTEND_STATEMENT);
                       boolean jjtc000 = true;
                       jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) END_STATEMENT */
 try {
/*@egen*/
 t= < END_STATEMENT >/*@bgen(jjtree)*/
                      {
                        jjtree.closeNodeScope(jjtn000, true);
                        jjtc000 = false;
                      }
/*@egen*/ {jjtn000.jjtSetValue(t.image);}/*@bgen(jjtree)*/
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
 }
/*@egen*/
}

void BAR(): {/*@bgen(jjtree) BAR */
             SimpleNode jjtn000 = new SimpleNode(JJTBAR);
             boolean jjtc000 = true;
             jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) BAR */
 try {
/*@egen*/
 t= < BAR >/*@bgen(jjtree)*/
            {
              jjtree.closeNodeScope(jjtn000, true);
              jjtc000 = false;
            }
/*@egen*/ {jjtn000.jjtSetValue(t.image);}/*@bgen(jjtree)*/
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
 }
/*@egen*/
}

void LETTER(): {/*@bgen(jjtree) LETTER */
                SimpleNode jjtn000 = new SimpleNode(JJTLETTER);
                boolean jjtc000 = true;
                jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) LETTER */
 try {
/*@egen*/
 t= < LETTER >/*@bgen(jjtree)*/
               {
                 jjtree.closeNodeScope(jjtn000, true);
                 jjtc000 = false;
               }
/*@egen*/ {jjtn000.jjtSetValue(t.image);}/*@bgen(jjtree)*/
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
 }
/*@egen*/
}

void SYMBOL(): {/*@bgen(jjtree) SYMBOL */
                SimpleNode jjtn000 = new SimpleNode(JJTSYMBOL);
                boolean jjtc000 = true;
                jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) SYMBOL */
 try {
/*@egen*/
 t= < SYMBOL >/*@bgen(jjtree)*/
               {
                 jjtree.closeNodeScope(jjtn000, true);
                 jjtc000 = false;
               }
/*@egen*/ {jjtn000.jjtSetValue(t.image);}/*@bgen(jjtree)*/
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
 }
/*@egen*/
}

void ID(): {/*@bgen(jjtree) ID */
            SimpleNode jjtn000 = new SimpleNode(JJTID);
            boolean jjtc000 = true;
            jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) ID */
 try {
/*@egen*/
 t= < ID >/*@bgen(jjtree)*/
           {
             jjtree.closeNodeScope(jjtn000, true);
             jjtc000 = false;
           }
/*@egen*/ {jjtn000.jjtSetValue(t.image);}/*@bgen(jjtree)*/
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
 }
/*@egen*/
}

Token IN(): {/*@bgen(jjtree) IN */
             SimpleNode jjtn000 = new SimpleNode(JJTIN);
             boolean jjtc000 = true;
             jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) IN */
 try {
/*@egen*/
 t= < IN >/*@bgen(jjtree)*/
           {
             jjtree.closeNodeScope(jjtn000, true);
             jjtc000 = false;
           }
/*@egen*/ {jjtn000.jjtSetValue(t.image); return t;}/*@bgen(jjtree)*/
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
 }
/*@egen*/
}

void FL(): {/*@bgen(jjtree) FL */
            SimpleNode jjtn000 = new SimpleNode(JJTFL);
            boolean jjtc000 = true;
            jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) FL */
 try {
/*@egen*/
 t= < FL >/*@bgen(jjtree)*/
           {
             jjtree.closeNodeScope(jjtn000, true);
             jjtc000 = false;
           }
/*@egen*/ {jjtn000.jjtSetValue(t.image);}/*@bgen(jjtree)*/
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
 }
/*@egen*/
}

void BO(): {/*@bgen(jjtree) BO */
            SimpleNode jjtn000 = new SimpleNode(JJTBO);
            boolean jjtc000 = true;
            jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) BO */
 try {
/*@egen*/
 t= < BO >/*@bgen(jjtree)*/
           {
             jjtree.closeNodeScope(jjtn000, true);
             jjtc000 = false;
           }
/*@egen*/ {jjtn000.jjtSetValue(t.image);}/*@bgen(jjtree)*/
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
 }
/*@egen*/
}

void CONSTANT(): {/*@bgen(jjtree) CONSTANT */
                  SimpleNode jjtn000 = new SimpleNode(JJTCONSTANT);
                  boolean jjtc000 = true;
                  jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) CONSTANT */
 try {
/*@egen*/
 t= < CONSTANT >/*@bgen(jjtree)*/
                 {
                   jjtree.closeNodeScope(jjtn000, true);
                   jjtc000 = false;
                 }
/*@egen*/ {jjtn000.jjtSetValue(t.image);}/*@bgen(jjtree)*/
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
 }
/*@egen*/
}

void INCASE(): {/*@bgen(jjtree) INCASE */
                SimpleNode jjtn000 = new SimpleNode(JJTINCASE);
                boolean jjtc000 = true;
                jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) INCASE */
 try {
/*@egen*/
 t= < INCASE >/*@bgen(jjtree)*/
               {
                 jjtree.closeNodeScope(jjtn000, true);
                 jjtc000 = false;
               }
/*@egen*/ {jjtn000.jjtSetValue(t.image);}/*@bgen(jjtree)*/
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
 }
/*@egen*/
}

void SO(): {/*@bgen(jjtree) SO */
            SimpleNode jjtn000 = new SimpleNode(JJTSO);
            boolean jjtc000 = true;
            jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) SO */
 try {
/*@egen*/
 t= < SO >/*@bgen(jjtree)*/
           {
             jjtree.closeNodeScope(jjtn000, true);
             jjtc000 = false;
           }
/*@egen*/ {jjtn000.jjtSetValue(t.image);}/*@bgen(jjtree)*/
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
 }
/*@egen*/
}

void ELSE(): {/*@bgen(jjtree) ELSE */
              SimpleNode jjtn000 = new SimpleNode(JJTELSE);
              boolean jjtc000 = true;
              jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) ELSE */
 try {
/*@egen*/
 t= < ELSE >/*@bgen(jjtree)*/
             {
               jjtree.closeNodeScope(jjtn000, true);
               jjtc000 = false;
             }
/*@egen*/ {jjtn000.jjtSetValue(t.image);}/*@bgen(jjtree)*/
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
 }
/*@egen*/
}

void END(): {/*@bgen(jjtree) END */
             SimpleNode jjtn000 = new SimpleNode(JJTEND);
             boolean jjtc000 = true;
             jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) END */
 try {
/*@egen*/
 t= < END >/*@bgen(jjtree)*/
            {
              jjtree.closeNodeScope(jjtn000, true);
              jjtc000 = false;
            }
/*@egen*/ {jjtn000.jjtSetValue(t.image);}/*@bgen(jjtree)*/
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
 }
/*@egen*/
}

void REPEAT(): {/*@bgen(jjtree) REPEAT */
                SimpleNode jjtn000 = new SimpleNode(JJTREPEAT);
                boolean jjtc000 = true;
                jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) REPEAT */
 try {
/*@egen*/
 t= < REPEAT >/*@bgen(jjtree)*/
               {
                 jjtree.closeNodeScope(jjtn000, true);
                 jjtc000 = false;
               }
/*@egen*/ {jjtn000.jjtSetValue(t.image);}/*@bgen(jjtree)*/
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
 }
/*@egen*/
}

void ARR(): {/*@bgen(jjtree) ARR */
             SimpleNode jjtn000 = new SimpleNode(JJTARR);
             boolean jjtc000 = true;
             jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) ARR */
 try {
/*@egen*/
 t= < ARR >/*@bgen(jjtree)*/
            {
              jjtree.closeNodeScope(jjtn000, true);
              jjtc000 = false;
            }
/*@egen*/ {jjtn000.jjtSetValue(t.image);}/*@bgen(jjtree)*/
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
 }
/*@egen*/
}

void LIST(): {/*@bgen(jjtree) LIST */
              SimpleNode jjtn000 = new SimpleNode(JJTLIST);
              boolean jjtc000 = true;
              jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) LIST */
 try {
/*@egen*/
 t= < LIST >/*@bgen(jjtree)*/
             {
               jjtree.closeNodeScope(jjtn000, true);
               jjtc000 = false;
             }
/*@egen*/ {jjtn000.jjtSetValue(t.image);}/*@bgen(jjtree)*/
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
 }
/*@egen*/
}
