/* Generated By:JJTree&JavaCC: Do not edit this line. Emoji_Language.java */
package CPCS302_Project_jjt;

public class Emoji_Language/*@bgen(jjtree)*/implements Emoji_LanguageTreeConstants, Emoji_LanguageConstants {/*@bgen(jjtree)*/
  protected static JJTEmoji_LanguageState jjtree = new JJTEmoji_LanguageState();public static void main(String args [])
  {

    System.out.println("\u005cn----- Weclome To Our Emoji Language :] ----- ");
    System.out.println("");
    System.out.print("Enter an expression: ");
    new Emoji_Language(System.in);
    try
    {
      SimpleNode n = Emoji_Language.Start();
      System.out.println("");
      n.dump(" >> ");
       System.out.println("\u005cncorrect statement.");
      System.out.println("Thank you.");
    }
    catch (Exception e)
    {
      System.out.println("\u005cnOops, Incorrect statement.");
      System.out.println(e.getMessage());
    }
    catch(Error e)
        {
          System.out.println("\u005cnOops, Incorrect statement.");
          System.out.println(e.getMessage());
        }

  }

// ---------------------- GRAMMARS ------------------------- //
  static final public SimpleNode Start() throws ParseException {
 /*@bgen(jjtree) Start */
  SimpleNode jjtn000 = new SimpleNode(JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Stmts();
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  static final public void Stmts() throws ParseException {
 /*@bgen(jjtree) Stmts */
  SimpleNode jjtn000 = new SimpleNode(JJTSTMTS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ID:
      case CONSTANT:
        Decleration_Stmt();
        END_STATEMENT();
        break;
      case ARR:
        Array();
        break;
      case LIST:
        List();
        break;
      case REPEAT:
        Iterative_Stmt();
        break;
      case INCASE:
        Conditional_Stmt();
        break;
      default:
        jj_la1[0] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void Decleration_Stmt() throws ParseException {
 /*@bgen(jjtree) Decleration_Stmt */
  SimpleNode jjtn000 = new SimpleNode(JJTDECLERATION_STMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CONSTANT:
        Constant_Stmt();
        break;
      case ID:
        Assignment_Stmt();
        break;
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     {if (true) throw (RuntimeException)jjte000;}
   }
   if (jjte000 instanceof ParseException) {
     {if (true) throw (ParseException)jjte000;}
   }
   {if (true) throw (Error)jjte000;}
    } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
    }
  }

  static final public void Constant_Stmt() throws ParseException {
 /*@bgen(jjtree) Constant_Stmt */
  SimpleNode jjtn000 = new SimpleNode(JJTCONSTANT_STMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      CONSTANT();
      ID();
      ASSIGNMENT();
      Stmt();
                                        jjtree.closeNodeScope(jjtn000, true);
                                        jjtc000 = false;
                                        System.out.println("Found a Constant");
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void Assignment_Stmt() throws ParseException {
 /*@bgen(jjtree) Assignment_Stmt */
  SimpleNode jjtn000 = new SimpleNode(JJTASSIGNMENT_STMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      ID();
      ASSIGNMENT();
      Stmt();
                            jjtree.closeNodeScope(jjtn000, true);
                            jjtc000 = false;
                            System.out.println("Found an Assignment Statement");
    } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     {if (true) throw (RuntimeException)jjte000;}
   }
   if (jjte000 instanceof ParseException) {
     {if (true) throw (ParseException)jjte000;}
   }
   {if (true) throw (Error)jjte000;}
    } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
    }
  }

  static final public void Stmt() throws ParseException {
 /*@bgen(jjtree) Stmt */
  SimpleNode jjtn000 = new SimpleNode(JJTSTMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ID:
      case IN:
      case FL:
        Operand();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PLUS:
        case MINUS:
        case MULTIPLY:
        case DIVIDE:
        case REMAINDER:
        case POWER:
        case IS_EQUAL:
        case NOT_EQUAL:
        case GREATER_THAN:
        case GREATER_THAN_OR_EQUAL:
        case LESS_THAN:
        case LESS_THAN_OR_EQUAL:
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case PLUS:
          case MINUS:
          case MULTIPLY:
          case DIVIDE:
          case REMAINDER:
          case POWER:
            Arithmetic_Stmt();
            break;
          case IS_EQUAL:
          case NOT_EQUAL:
          case GREATER_THAN:
          case GREATER_THAN_OR_EQUAL:
          case LESS_THAN:
          case LESS_THAN_OR_EQUAL:
            Relational_Stmt();
            break;
          default:
            jj_la1[2] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
        default:
          jj_la1[3] = jj_gen;
          ;
        }
        break;
      case BO:
        Boolean_Stmt();
        break;
      default:
        jj_la1[4] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void Arithmetic_Stmt() throws ParseException {
 /*@bgen(jjtree) Arithmetic_Stmt */
  SimpleNode jjtn000 = new SimpleNode(JJTARITHMETIC_STMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      label_1:
      while (true) {
        Arithmetic_Operation();
        Operand();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PLUS:
        case MINUS:
        case MULTIPLY:
        case DIVIDE:
        case REMAINDER:
        case POWER:
          ;
          break;
        default:
          jj_la1[5] = jj_gen;
          break label_1;
        }
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void Relational_Stmt() throws ParseException {
 /*@bgen(jjtree) Relational_Stmt */
  SimpleNode jjtn000 = new SimpleNode(JJTRELATIONAL_STMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      label_2:
      while (true) {
        Relational_Operation();
        Operand();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IS_EQUAL:
        case NOT_EQUAL:
        case GREATER_THAN:
        case GREATER_THAN_OR_EQUAL:
        case LESS_THAN:
        case LESS_THAN_OR_EQUAL:
          ;
          break;
        default:
          jj_la1[6] = jj_gen;
          break label_2;
        }
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void Boolean_Stmt() throws ParseException {
 /*@bgen(jjtree) Boolean_Stmt */
  SimpleNode jjtn000 = new SimpleNode(JJTBOOLEAN_STMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      BO();
      label_3:
      while (true) {
        Logical_Operators();
        BO();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case AND:
        case OR:
        case NOT:
          ;
          break;
        default:
          jj_la1[7] = jj_gen;
          break label_3;
        }
      }
    } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     {if (true) throw (RuntimeException)jjte000;}
   }
   if (jjte000 instanceof ParseException) {
     {if (true) throw (ParseException)jjte000;}
   }
   {if (true) throw (Error)jjte000;}
    } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
    }
  }

  static final public void Arithmetic_Operation() throws ParseException {
 /*@bgen(jjtree) Arithmetic_Operation */
  SimpleNode jjtn000 = new SimpleNode(JJTARITHMETIC_OPERATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        PLUS();
        break;
      case MINUS:
        MINUS();
        break;
      case MULTIPLY:
        MULTIPLY();
        break;
      case DIVIDE:
        DIVIDE();
        break;
      case REMAINDER:
        REMAINDER();
        break;
      case POWER:
        POWER();
        break;
      default:
        jj_la1[8] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    {if (true) throw (RuntimeException)jjte000;}
  }
  if (jjte000 instanceof ParseException) {
    {if (true) throw (ParseException)jjte000;}
  }
  {if (true) throw (Error)jjte000;}
    } finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
    }
  }

  static final public void Relational_Operation() throws ParseException {
 /*@bgen(jjtree) Relational_Operation */
  SimpleNode jjtn000 = new SimpleNode(JJTRELATIONAL_OPERATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IS_EQUAL:
        IS_EQUAL();
        break;
      case NOT_EQUAL:
        NOT_EQUAL();
        break;
      case GREATER_THAN:
        GREATER_THAN();
        break;
      case GREATER_THAN_OR_EQUAL:
        GREATER_THAN_OR_EQUAL();
        break;
      case LESS_THAN:
        LESS_THAN();
        break;
      case LESS_THAN_OR_EQUAL:
        LESS_THAN_OR_EQUAL();
        break;
      default:
        jj_la1[9] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void Logical_Operators() throws ParseException {
 /*@bgen(jjtree) Logical_Operators */
  SimpleNode jjtn000 = new SimpleNode(JJTLOGICAL_OPERATORS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
        AND();
        break;
      case OR:
        OR();
        break;
      case NOT:
        NOT();
        break;
      default:
        jj_la1[10] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void Array() throws ParseException {
 /*@bgen(jjtree) Array */
  SimpleNode jjtn000 = new SimpleNode(JJTARRAY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      ARR();
      ID();
      OPEN_ANGLE_BRACKET();
      CLOSE_ANGLE_BRACKET();
      ASSIGNMENT();
      OPEN_SQUARE_BRACKET();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IN:
      case FL:
        Number();
        break;
      case LETTER:
      case SYMBOL:
        String();
        break;
      default:
        jj_la1[11] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BAR:
          ;
          break;
        default:
          jj_la1[12] = jj_gen;
          break label_4;
        }
        BAR();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IN:
        case FL:
          Number();
          break;
        case LETTER:
        case SYMBOL:
          String();
          break;
        default:
          jj_la1[13] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      CLOSE_SQUARE_BRACKET();
      END_STATEMENT();
                                          jjtree.closeNodeScope(jjtn000, true);
                                          jjtc000 = false;
                                          System.out.println("Found an Array");
    } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     {if (true) throw (RuntimeException)jjte000;}
   }
   if (jjte000 instanceof ParseException) {
     {if (true) throw (ParseException)jjte000;}
   }
   {if (true) throw (Error)jjte000;}
    } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
    }
  }

  static final public void List() throws ParseException {
 /*@bgen(jjtree) List */
  SimpleNode jjtn000 = new SimpleNode(JJTLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);int count = 0; Token listSize;
    try {
      LIST();
      ID();
      OPEN_ANGLE_BRACKET();
      listSize = IN();
      CLOSE_ANGLE_BRACKET();
      ASSIGNMENT();
      OPEN_SQUARE_BRACKET();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IN:
      case FL:
        Number();
        break;
      case LETTER:
      case SYMBOL:
        String();
        break;
      default:
        jj_la1[14] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                            count++;
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BAR:
          ;
          break;
        default:
          jj_la1[15] = jj_gen;
          break label_5;
        }
        BAR();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IN:
        case FL:
          Number();
          break;
        case LETTER:
        case SYMBOL:
          String();
          break;
        default:
          jj_la1[16] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
                                                                         count++;
      }
      CLOSE_SQUARE_BRACKET();
      END_STATEMENT();
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    if (count != Integer.parseInt(listSize.image)) {if (true) throw new ParseException("The list must be of the specified size!");}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void Iterative_Stmt() throws ParseException {
 /*@bgen(jjtree) Iterative_Stmt */
  SimpleNode jjtn000 = new SimpleNode(JJTITERATIVE_STMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      REPEAT();
      Condition();
      OPEN_ROUND_BRACKET();
      label_6:
      while (true) {
        Stmts();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ID:
        case CONSTANT:
        case INCASE:
        case REPEAT:
        case ARR:
        case LIST:
          ;
          break;
        default:
          jj_la1[17] = jj_gen;
          break label_6;
        }
      }
      CLOSE_ROUND_BRACKET();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void Conditional_Stmt() throws ParseException {
 /*@bgen(jjtree) Conditional_Stmt */
  SimpleNode jjtn000 = new SimpleNode(JJTCONDITIONAL_STMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      INCASE();
      Condition();
      SO();
      OPEN_ROUND_BRACKET();
      label_7:
      while (true) {
        Stmts();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ID:
        case CONSTANT:
        case INCASE:
        case REPEAT:
        case ARR:
        case LIST:
          ;
          break;
        default:
          jj_la1[18] = jj_gen;
          break label_7;
        }
      }
      CLOSE_ROUND_BRACKET();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ELSE:
        Else_Stmt();
        break;
      default:
        jj_la1[19] = jj_gen;
        ;
      }
      END();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void Condition() throws ParseException {
 /*@bgen(jjtree) Condition */
  SimpleNode jjtn000 = new SimpleNode(JJTCONDITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      OPEN_SQUARE_BRACKET();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ID:
        ID();
        break;
      case IN:
      case FL:
        Number();
        break;
      default:
        jj_la1[20] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      Relational_Stmt();
      CLOSE_SQUARE_BRACKET();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void Else_Stmt() throws ParseException {
 /*@bgen(jjtree) Else_Stmt */
  SimpleNode jjtn000 = new SimpleNode(JJTELSE_STMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      ELSE();
      OPEN_ROUND_BRACKET();
      label_8:
      while (true) {
        Stmts();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ID:
        case CONSTANT:
        case INCASE:
        case REPEAT:
        case ARR:
        case LIST:
          ;
          break;
        default:
          jj_la1[21] = jj_gen;
          break label_8;
        }
      }
      CLOSE_ROUND_BRACKET();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void String() throws ParseException {
 /*@bgen(jjtree) String */
  SimpleNode jjtn000 = new SimpleNode(JJTSTRING);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      label_9:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LETTER:
          LETTER();
          break;
        case SYMBOL:
          SYMBOL();
          break;
        default:
          jj_la1[22] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LETTER:
        case SYMBOL:
          ;
          break;
        default:
          jj_la1[23] = jj_gen;
          break label_9;
        }
      }
    } catch (Throwable jjte000) {
   if (jjtc000) {
     jjtree.clearNodeScope(jjtn000);
     jjtc000 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte000 instanceof RuntimeException) {
     {if (true) throw (RuntimeException)jjte000;}
   }
   if (jjte000 instanceof ParseException) {
     {if (true) throw (ParseException)jjte000;}
   }
   {if (true) throw (Error)jjte000;}
    } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
    }
  }

  static final public void Operand() throws ParseException {
 /*@bgen(jjtree) Operand */
  SimpleNode jjtn000 = new SimpleNode(JJTOPERAND);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IN:
      case FL:
        Number();
        break;
      case ID:
        ID();
        break;
      default:
        jj_la1[24] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

// -------------- Convert Tokens To Methods ---------------- //
  static final public void Number() throws ParseException {
                 /*@bgen(jjtree) Number */
                 SimpleNode jjtn000 = new SimpleNode(JJTNUMBER);
                 boolean jjtc000 = true;
                 jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IN:
        t = jj_consume_token(IN);
             jjtree.closeNodeScope(jjtn000, true);
             jjtc000 = false;
            jjtn000.jjtSetValue(t.image);
        break;
      case FL:
        t = jj_consume_token(FL);
               jjtree.closeNodeScope(jjtn000, true);
               jjtc000 = false;
              jjtn000.jjtSetValue(t.image);
        break;
      default:
        jj_la1[25] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
    }
  }

  static final public void PLUS() throws ParseException {
              /*@bgen(jjtree) PLUS */
              SimpleNode jjtn000 = new SimpleNode(JJTPLUS);
              boolean jjtc000 = true;
              jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(PLUS);
              jjtree.closeNodeScope(jjtn000, true);
              jjtc000 = false;
             jjtn000.jjtSetValue(t.image);
    } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
    }
  }

  static final public void MINUS() throws ParseException {
               /*@bgen(jjtree) MINUS */
               SimpleNode jjtn000 = new SimpleNode(JJTMINUS);
               boolean jjtc000 = true;
               jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(MINUS);
                jjtree.closeNodeScope(jjtn000, true);
                jjtc000 = false;
               jjtn000.jjtSetValue(t.image);
    } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
    }
  }

  static final public void MULTIPLY() throws ParseException {
                  /*@bgen(jjtree) MULTIPLY */
                  SimpleNode jjtn000 = new SimpleNode(JJTMULTIPLY);
                  boolean jjtc000 = true;
                  jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(MULTIPLY);
                   jjtree.closeNodeScope(jjtn000, true);
                   jjtc000 = false;
                  jjtn000.jjtSetValue(t.image);
    } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
    }
  }

  static final public void DIVIDE() throws ParseException {
                /*@bgen(jjtree) DIVIDE */
                SimpleNode jjtn000 = new SimpleNode(JJTDIVIDE);
                boolean jjtc000 = true;
                jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(DIVIDE);
                 jjtree.closeNodeScope(jjtn000, true);
                 jjtc000 = false;
                jjtn000.jjtSetValue(t.image);
    } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
    }
  }

  static final public void REMAINDER() throws ParseException {
                   /*@bgen(jjtree) REMAINDER */
                   SimpleNode jjtn000 = new SimpleNode(JJTREMAINDER);
                   boolean jjtc000 = true;
                   jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(REMAINDER);
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
                   jjtn000.jjtSetValue(t.image);
    } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
    }
  }

  static final public void POWER() throws ParseException {
               /*@bgen(jjtree) POWER */
               SimpleNode jjtn000 = new SimpleNode(JJTPOWER);
               boolean jjtc000 = true;
               jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(POWER);
                 jjtree.closeNodeScope(jjtn000, true);
                 jjtc000 = false;
                jjtn000.jjtSetValue(t.image);
    } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
    }
  }

  static final public void ASSIGNMENT() throws ParseException {
                    /*@bgen(jjtree) ASSIGNMENT */
                    SimpleNode jjtn000 = new SimpleNode(JJTASSIGNMENT);
                    boolean jjtc000 = true;
                    jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(ASSIGNMENT);
                     jjtree.closeNodeScope(jjtn000, true);
                     jjtc000 = false;
                    jjtn000.jjtSetValue(t.image);
    } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
    }
  }

  static final public void IS_EQUAL() throws ParseException {
                  /*@bgen(jjtree) IS_EQUAL */
                  SimpleNode jjtn000 = new SimpleNode(JJTIS_EQUAL);
                  boolean jjtc000 = true;
                  jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(IS_EQUAL);
                   jjtree.closeNodeScope(jjtn000, true);
                   jjtc000 = false;
                  jjtn000.jjtSetValue(t.image);
    } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
    }
  }

  static final public void NOT_EQUAL() throws ParseException {
                   /*@bgen(jjtree) NOT_EQUAL */
                   SimpleNode jjtn000 = new SimpleNode(JJTNOT_EQUAL);
                   boolean jjtc000 = true;
                   jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(NOT_EQUAL);
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
                   jjtn000.jjtSetValue(t.image);
    } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
    }
  }

  static final public void GREATER_THAN() throws ParseException {
                      /*@bgen(jjtree) GREATER_THAN */
                      SimpleNode jjtn000 = new SimpleNode(JJTGREATER_THAN);
                      boolean jjtc000 = true;
                      jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(GREATER_THAN);
                       jjtree.closeNodeScope(jjtn000, true);
                       jjtc000 = false;
                      jjtn000.jjtSetValue(t.image);
    } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
    }
  }

  static final public void GREATER_THAN_OR_EQUAL() throws ParseException {
                               /*@bgen(jjtree) GREATER_THAN_OR_EQUAL */
                               SimpleNode jjtn000 = new SimpleNode(JJTGREATER_THAN_OR_EQUAL);
                               boolean jjtc000 = true;
                               jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(GREATER_THAN_OR_EQUAL);
                                jjtree.closeNodeScope(jjtn000, true);
                                jjtc000 = false;
                               jjtn000.jjtSetValue(t.image);
    } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
    }
  }

  static final public void LESS_THAN() throws ParseException {
                   /*@bgen(jjtree) LESS_THAN */
                   SimpleNode jjtn000 = new SimpleNode(JJTLESS_THAN);
                   boolean jjtc000 = true;
                   jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(LESS_THAN);
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
                   jjtn000.jjtSetValue(t.image);
    } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
    }
  }

  static final public void LESS_THAN_OR_EQUAL() throws ParseException {
                            /*@bgen(jjtree) LESS_THAN_OR_EQUAL */
                            SimpleNode jjtn000 = new SimpleNode(JJTLESS_THAN_OR_EQUAL);
                            boolean jjtc000 = true;
                            jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(LESS_THAN_OR_EQUAL);
                             jjtree.closeNodeScope(jjtn000, true);
                             jjtc000 = false;
                            jjtn000.jjtSetValue(t.image);
    } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
    }
  }

  static final public void AND() throws ParseException {
             /*@bgen(jjtree) AND */
             SimpleNode jjtn000 = new SimpleNode(JJTAND);
             boolean jjtc000 = true;
             jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(AND);
              jjtree.closeNodeScope(jjtn000, true);
              jjtc000 = false;
             jjtn000.jjtSetValue(t.image);
    } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
    }
  }

  static final public void OR() throws ParseException {
            /*@bgen(jjtree) OR */
            SimpleNode jjtn000 = new SimpleNode(JJTOR);
            boolean jjtc000 = true;
            jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(OR);
             jjtree.closeNodeScope(jjtn000, true);
             jjtc000 = false;
            jjtn000.jjtSetValue(t.image);
    } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
    }
  }

  static final public void NOT() throws ParseException {
             /*@bgen(jjtree) NOT */
             SimpleNode jjtn000 = new SimpleNode(JJTNOT);
             boolean jjtc000 = true;
             jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(NOT);
              jjtree.closeNodeScope(jjtn000, true);
              jjtc000 = false;
             jjtn000.jjtSetValue(t.image);
    } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
    }
  }

  static final public void OPEN_ROUND_BRACKET() throws ParseException {
                            /*@bgen(jjtree) OPEN_ROUND_BRACKET */
                            SimpleNode jjtn000 = new SimpleNode(JJTOPEN_ROUND_BRACKET);
                            boolean jjtc000 = true;
                            jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(OPEN_ROUND_BRACKET);
                             jjtree.closeNodeScope(jjtn000, true);
                             jjtc000 = false;
                            jjtn000.jjtSetValue(t.image);
    } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
    }
  }

  static final public void CLOSE_ROUND_BRACKET() throws ParseException {
                             /*@bgen(jjtree) CLOSE_ROUND_BRACKET */
                             SimpleNode jjtn000 = new SimpleNode(JJTCLOSE_ROUND_BRACKET);
                             boolean jjtc000 = true;
                             jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(CLOSE_ROUND_BRACKET);
                              jjtree.closeNodeScope(jjtn000, true);
                              jjtc000 = false;
                             jjtn000.jjtSetValue(t.image);
    } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
    }
  }

  static final public void OPEN_SQUARE_BRACKET() throws ParseException {
                             /*@bgen(jjtree) OPEN_SQUARE_BRACKET */
                             SimpleNode jjtn000 = new SimpleNode(JJTOPEN_SQUARE_BRACKET);
                             boolean jjtc000 = true;
                             jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(OPEN_SQUARE_BRACKET);
                              jjtree.closeNodeScope(jjtn000, true);
                              jjtc000 = false;
                             jjtn000.jjtSetValue(t.image);
    } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
    }
  }

  static final public void CLOSE_SQUARE_BRACKET() throws ParseException {
                              /*@bgen(jjtree) CLOSE_SQUARE_BRACKET */
                              SimpleNode jjtn000 = new SimpleNode(JJTCLOSE_SQUARE_BRACKET);
                              boolean jjtc000 = true;
                              jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(CLOSE_SQUARE_BRACKET);
                               jjtree.closeNodeScope(jjtn000, true);
                               jjtc000 = false;
                              jjtn000.jjtSetValue(t.image);
    } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
    }
  }

  static final public void OPEN_ANGLE_BRACKET() throws ParseException {
                            /*@bgen(jjtree) OPEN_ANGLE_BRACKET */
                            SimpleNode jjtn000 = new SimpleNode(JJTOPEN_ANGLE_BRACKET);
                            boolean jjtc000 = true;
                            jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(OPEN_ANGLE_BRACKET);
                             jjtree.closeNodeScope(jjtn000, true);
                             jjtc000 = false;
                            jjtn000.jjtSetValue(t.image);
    } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
    }
  }

  static final public void CLOSE_ANGLE_BRACKET() throws ParseException {
                             /*@bgen(jjtree) CLOSE_ANGLE_BRACKET */
                             SimpleNode jjtn000 = new SimpleNode(JJTCLOSE_ANGLE_BRACKET);
                             boolean jjtc000 = true;
                             jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(CLOSE_ANGLE_BRACKET);
                              jjtree.closeNodeScope(jjtn000, true);
                              jjtc000 = false;
                             jjtn000.jjtSetValue(t.image);
    } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
    }
  }

  static final public void END_STATEMENT() throws ParseException {
                       /*@bgen(jjtree) END_STATEMENT */
                       SimpleNode jjtn000 = new SimpleNode(JJTEND_STATEMENT);
                       boolean jjtc000 = true;
                       jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(END_STATEMENT);
                        jjtree.closeNodeScope(jjtn000, true);
                        jjtc000 = false;
                       jjtn000.jjtSetValue(t.image);
    } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
    }
  }

  static final public void BAR() throws ParseException {
             /*@bgen(jjtree) BAR */
             SimpleNode jjtn000 = new SimpleNode(JJTBAR);
             boolean jjtc000 = true;
             jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(BAR);
              jjtree.closeNodeScope(jjtn000, true);
              jjtc000 = false;
             jjtn000.jjtSetValue(t.image);
    } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
    }
  }

  static final public void LETTER() throws ParseException {
                /*@bgen(jjtree) LETTER */
                SimpleNode jjtn000 = new SimpleNode(JJTLETTER);
                boolean jjtc000 = true;
                jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(LETTER);
                 jjtree.closeNodeScope(jjtn000, true);
                 jjtc000 = false;
                jjtn000.jjtSetValue(t.image);
    } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
    }
  }

  static final public void SYMBOL() throws ParseException {
                /*@bgen(jjtree) SYMBOL */
                SimpleNode jjtn000 = new SimpleNode(JJTSYMBOL);
                boolean jjtc000 = true;
                jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(SYMBOL);
                 jjtree.closeNodeScope(jjtn000, true);
                 jjtc000 = false;
                jjtn000.jjtSetValue(t.image);
    } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
    }
  }

  static final public void ID() throws ParseException {
            /*@bgen(jjtree) ID */
            SimpleNode jjtn000 = new SimpleNode(JJTID);
            boolean jjtc000 = true;
            jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(ID);
             jjtree.closeNodeScope(jjtn000, true);
             jjtc000 = false;
            jjtn000.jjtSetValue(t.image);
    } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
    }
  }

  static final public Token IN() throws ParseException {
             /*@bgen(jjtree) IN */
             SimpleNode jjtn000 = new SimpleNode(JJTIN);
             boolean jjtc000 = true;
             jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(IN);
             jjtree.closeNodeScope(jjtn000, true);
             jjtc000 = false;
            jjtn000.jjtSetValue(t.image); {if (true) return t;}
    } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
    }
    throw new Error("Missing return statement in function");
  }

  static final public void FL() throws ParseException {
            /*@bgen(jjtree) FL */
            SimpleNode jjtn000 = new SimpleNode(JJTFL);
            boolean jjtc000 = true;
            jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(FL);
             jjtree.closeNodeScope(jjtn000, true);
             jjtc000 = false;
            jjtn000.jjtSetValue(t.image);
    } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
    }
  }

  static final public void BO() throws ParseException {
            /*@bgen(jjtree) BO */
            SimpleNode jjtn000 = new SimpleNode(JJTBO);
            boolean jjtc000 = true;
            jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(BO);
             jjtree.closeNodeScope(jjtn000, true);
             jjtc000 = false;
            jjtn000.jjtSetValue(t.image);
    } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
    }
  }

  static final public void CONSTANT() throws ParseException {
                  /*@bgen(jjtree) CONSTANT */
                  SimpleNode jjtn000 = new SimpleNode(JJTCONSTANT);
                  boolean jjtc000 = true;
                  jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(CONSTANT);
                   jjtree.closeNodeScope(jjtn000, true);
                   jjtc000 = false;
                  jjtn000.jjtSetValue(t.image);
    } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
    }
  }

  static final public void INCASE() throws ParseException {
                /*@bgen(jjtree) INCASE */
                SimpleNode jjtn000 = new SimpleNode(JJTINCASE);
                boolean jjtc000 = true;
                jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(INCASE);
                 jjtree.closeNodeScope(jjtn000, true);
                 jjtc000 = false;
                jjtn000.jjtSetValue(t.image);
    } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
    }
  }

  static final public void SO() throws ParseException {
            /*@bgen(jjtree) SO */
            SimpleNode jjtn000 = new SimpleNode(JJTSO);
            boolean jjtc000 = true;
            jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(SO);
             jjtree.closeNodeScope(jjtn000, true);
             jjtc000 = false;
            jjtn000.jjtSetValue(t.image);
    } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
    }
  }

  static final public void ELSE() throws ParseException {
              /*@bgen(jjtree) ELSE */
              SimpleNode jjtn000 = new SimpleNode(JJTELSE);
              boolean jjtc000 = true;
              jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(ELSE);
               jjtree.closeNodeScope(jjtn000, true);
               jjtc000 = false;
              jjtn000.jjtSetValue(t.image);
    } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
    }
  }

  static final public void END() throws ParseException {
             /*@bgen(jjtree) END */
             SimpleNode jjtn000 = new SimpleNode(JJTEND);
             boolean jjtc000 = true;
             jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(END);
              jjtree.closeNodeScope(jjtn000, true);
              jjtc000 = false;
             jjtn000.jjtSetValue(t.image);
    } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
    }
  }

  static final public void REPEAT() throws ParseException {
                /*@bgen(jjtree) REPEAT */
                SimpleNode jjtn000 = new SimpleNode(JJTREPEAT);
                boolean jjtc000 = true;
                jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(REPEAT);
                 jjtree.closeNodeScope(jjtn000, true);
                 jjtc000 = false;
                jjtn000.jjtSetValue(t.image);
    } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
    }
  }

  static final public void ARR() throws ParseException {
             /*@bgen(jjtree) ARR */
             SimpleNode jjtn000 = new SimpleNode(JJTARR);
             boolean jjtc000 = true;
             jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(ARR);
              jjtree.closeNodeScope(jjtn000, true);
              jjtc000 = false;
             jjtn000.jjtSetValue(t.image);
    } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
    }
  }

  static final public void LIST() throws ParseException {
              /*@bgen(jjtree) LIST */
              SimpleNode jjtn000 = new SimpleNode(JJTLIST);
              boolean jjtc000 = true;
              jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(LIST);
               jjtree.closeNodeScope(jjtn000, true);
               jjtc000 = false;
              jjtn000.jjtSetValue(t.image);
    } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
    }
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public Emoji_LanguageTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[26];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x80000000,0x80000000,0x3f7e0,0x3f7e0,0x80000000,0x7e0,0x3f000,0x1c0000,0x7e0,0x3f000,0x1c0000,0x60000000,0x10000000,0x60000000,0x60000000,0x10000000,0x60000000,0x80000000,0x80000000,0x0,0x80000000,0x80000000,0x60000000,0x60000000,0x80000000,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x718,0x8,0x0,0x0,0x7,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x0,0x3,0x3,0x0,0x3,0x718,0x718,0x40,0x3,0x718,0x0,0x0,0x3,0x3,};
   }

  /** Constructor with InputStream. */
  public Emoji_Language(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Emoji_Language(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new Emoji_LanguageTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 26; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 26; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Emoji_Language(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new Emoji_LanguageTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 26; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 26; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Emoji_Language(Emoji_LanguageTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 26; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(Emoji_LanguageTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 26; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[45];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 26; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 45; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
